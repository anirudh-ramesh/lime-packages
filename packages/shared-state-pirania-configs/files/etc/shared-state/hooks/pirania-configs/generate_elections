#!/usr/bin/lua

--! LibreMesh
--! Copyright (C) 2019  Luandro <luandro@gmail.com>
--!
--! This program is free software: you can redistribute it and/or modify
--! it under the terms of the GNU Affero General Public License as
--! published by the Free Software Foundation, either version 3 of the
--! License, or (at your option) any later version.
--!
--! This program is distributed in the hope that it will be useful,
--! but WITHOUT ANY WARRANTY; without even the implied warranty of
--! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--! GNU Affero General Public License for more details.
--!
--! You should have received a copy of the GNU Affero General Public License
--! along with this program.  If not, see <http://www.gnu.org/licenses/>.

local JSON = require("luci.jsonc")
local uci = require("uci")
local uci_conf = uci.cursor()

local inputTable = JSON.parse(io.stdin:read("*all"))
local dbPath = uci_conf:get("pirania", "base_config", "elections_path")

local function shell(command)
    local handle = io.popen(command)
    local result = handle:read("*a")
    handle:close()
    return result
end

local function reduce(cb, tab, default)
    local result = default
    for k, act in pairs(tab) do
        result = cb(result,act) 
    end
    return result
end

local initialHash = shell('md5sum '..dbPath..' | cut -d \' \' -f 1'):gsub("\n","")
local sortedTable = {}

-- Get elecions data
for key,sharedData in pairs(inputTable) do
 	table.insert(sortedTable,sharedData.data)
end

-- Sort vouchers by secret key
table.sort(sortedTable, function (left, right)	
    return left.voucher < right.voucher
end)

-- Reduce vouchers to update macs and expires values
local result = reduce(function(prev, act)
    if prev[act.voucher] == nil then 
        prev[act.voucher] = act
    elseif tonumber(act.expires) == 0 then
        prev[act.voucher] = act
    elseif #prev[act.voucher].macs < #act.macs then
        prev[act.voucher] = act
    end
    return prev
end , sortedTable, {})
    
-- Generate db lines
for key,vo in pairs(result) do
    table.insert(outputTable, vo.name..','..vo.voucher..','..vo.expires..',10,10,'..vo.macsAllowed..','..macs2string(vo.macs))
end


-- Write result and calc new md5hash
io.output(dbPath):write(table.concat(outputTable, '\n').."\n")
local finalHash = shell('md5sum '..dbPath..' | cut -d \' \' -f 1')

-- If db change trigger something?
if initialHash ~= finalHash then
    -- shell('captive-portal update')
end
